~"
There are  several ways  to  express the  same syntactic  tree  in Alpha  so that  the
programmer may choose  the one that fits the situation best. First, every atom is  of the form
SYMBOL | OPEN ATOM* CLOSE where OPEN and CLOSE are matching parentheses.

For example,  `foo' is  a syntactic  tree and  so is `(define  { answer  [add 41  1] })'
but `(hello world]' is not.

There  are 3  kinds  of parentheses  in  Alpha: binding  (`[]'),  semi-binding (`()')  and
loose (`{}').  If a group  of atoms is bound,  it means they  correspond to a node  in the
syntax tree.  Otherwise, it means they are part of a higher node.

For example, writing `[{a b c} (d) (e f) [g h]]' yields the resulting tree: <a b c d <e f>
<g h>>
"

verb_allocate(n)_do{
  alter_block_@{*block*}
  choose_do{
    bind[? ? ? next]{ block }
    next
  } ~then _do{
    bind[bl allocated size next [data]]{ next }
    allocated:choose {
      do{ next .alter{block} ; <-().<-() }

      do{
        alter_sz_n:+ #{bl}
        size:- sz .alter{delta}
        choose_delta:> #{bl}_do{
          bind[block' allocated' size' next']{ block:+ delta }
          alter_{allocated' 0}_{size' delta}_{size sz}_{next next'}
          @{block'} .alter{next}
        } ~else _do{}
        1  .alter{allocated}
        @{data}.<-
      }
    }
  } ~else _do{
    sysalloc(16) .alter{next}
    <-(next)
  }
}

verb_free(p)_do{
  alter{addr}( p:- do{ bind[bl ? ? ?] ; #{bl} } )
}
