noun_[*macros* size psize pref]_do{
  alter_size_1024:* #{?}
  alter_psize_size ; alter_pref_allocate(psize)
  alter_{cur pref}_{end pref:+ psize}
  choose_cur:< end_do{
    val:bind cur
    alter_{val 0}_{cur cur:+ #{?}}
    <-()
  }_do{}
}

verb_lookup(sym)_do{
  alter_ind_sym:% 1024
  alter_pcur_*macros*:+ (ind:* #{?})
  choose_do{ bind{cur}{ pcur } ; cur:<> 0 }_do{
    bind[? s ? next]{ cur }
    choose(s:= sym){
      @(cur).->.-> ;
      do{ alter_pcur_@(next) ; <-(<-()) }
    }
  }_@(cur)
}

verb_define-macro(sym,val)_do{
  bind{cur lookup(sym)}
  bind[? ? v ?](do{
    choose_cur:= 0_do{
      bind[cell s ? next]{ allocate(do{ bind[cell ? ? ?]; #{cell} }) }
      alter{s sym}{next 0}{cur @{cell}}
    }_do{}
    
    cur
  })
  alter_v_val
}

verb_macroexpand(tree)_do{
  choose_do{ bind[? type [data]]{ tree } ; type }_tree_do{
    bind[node size [subs]]{ @{data} }
    choose_size:> 0_do{
      [? head [tail]]:bind @{subs}
      alter{macro}{
        choose_type_do{
          [? type sym]:bind head
          pcell:bind lookup(sym)
          choose_pcell:<> 0_do{ [? ? v ?]:bind pcell; v }_0
        }_0
      }
      choose_macro_do{
        alter_tree_macro(size:- 1,@{tail})
        <-(<-(<-()))
      }_do{
        alter_subsize_size:* #{?}
        [ret type size' [subs']]:bind allocate(subsize:+ (2:* #{?}))
        alter_{size' size}_{type 1}
        alter_{psrc @{subs}}_{pdst @{subs'}}
        alter_{end pdst:+ subsize}
        choose_pdst:< end_do{
          [? dst [tdst]]:bind pdst ; [? src [tsrc]]:bind psrc
          alter_dst_macroexpand(src)
          alter_{pdst @{tdst}}_{psrc @{tsrc}}
          <-()
        }_do{}
        @{ret}
      }
    }_tree
  }
}

setTransform(macroexpand)

